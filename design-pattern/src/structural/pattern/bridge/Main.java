package structural.pattern.bridge;

/*
桥接模式（Bridge）
是用于把抽象化与实现化解耦，使得二者可以独立变化。这种类型的设计模式属于结构型模式，它通过提供抽象化和实现化之间的桥接结构，来实现二者的解耦。
这种模式涉及到一个作为桥接的接口，使得实体类的功能独立于接口实现类。这两种类型的类可被结构化改变而互不影响。

意图：将抽象部分与实现部分分离，使它们都可以独立的变化。
主要解决：在有多种可能会变化的情况下，用继承会造成类爆炸问题，扩展起来不灵活。
何时使用：实现系统可能有多个角度分类，每一种角度都可能变化。
如何解决：把这种多角度分类分离出来，让它们独立变化，减少它们之间耦合。
关键代码：抽象类依赖实现类。
应用实例： 1、猪八戒从天蓬元帅转世投胎到猪，转世投胎的机制将尘世划分为两个等级，即：灵魂和肉体，前者相当于抽象化，后者相当于实现化。生灵通过功能的委派，
                           调用肉体对象的功能，使得生灵可以动态地选择。 
       2、墙上的开关，可以看到的开关是抽象的，不用管里面具体怎么实现的。
优点：1、分离抽象接口及其实现部分。提高了比继承更好的解决方案。
    2、桥接模式提高了系统的可扩充性，在两个变化维度中任意扩展一个维度，都不需要修改原有系统。
    3、实现细节对客户透明，可以对用户隐藏实现细节。
缺点：1、桥接模式的引入会增加系统的理解与设计难度，由于聚合关联关系建立在抽象层，要求开发者针对抽象进行设计与编程。 
    2、桥接模式要求正确识别出系统中两个独立变化的维度，因此其使用范围具有一定的局限性。
使用场景： 1、如果一个系统需要在构件的抽象化角色和具体化角色之间增加更多的灵活性，避免在两个层次之间建立静态的继承联系，通过桥接模式可以使它们在抽象层建立一个关联关系。
       2、对于那些不希望使用继承或因为多层次继承导致系统类的个数急剧增加的系统，桥接模式尤为适用。 
       3、一个类存在两个独立变化的维度，且这两个维度都需要进行扩展。
注意事项： 1、桥接模式实现了抽象化与实现化的脱耦。他们两个互相独立，不会影响到对方。
       2、对于两个独立变化的维度，使用桥接模式再适合不过了。
       3、对于“具体的抽象类”所做的改变，是不会影响到客户。

 桥接模式将继承关系转化成关联关系，它降低了类与类之间的耦合度，减少了系统中类的数量，也减少了代码量。将抽象部分与他的实现部分分离这句话不是很好理解，
 其实这并不是将抽象类与他的派生类分离，而是抽象类和它的派生类用来实现自己的对象。这样还是不能理解的话。我们就先来认清什么是抽象化，什么是实现化，什么是脱耦。
	 抽象化：其概念是将复杂物体的一个或几个特性抽出去而只注意其他特性的行动或过程。在面向对象就是将对象共同的性质抽取出去而形成类的过程。
	 实现化：针对抽象化给出的具体实现。它和抽象化是一个互逆的过程，实现化是对抽象化事物的进一步具体化。
	 脱耦：脱耦就是将抽象化和实现化之间的耦合解脱开，或者说是将它们之间的强关联改换成弱关联，将两个角色之间的继承关系改为关联关系。
桥接模式中的所谓脱耦，就是指在一个软件系统的抽象化和实现化之间使用关联关系（组合或者聚合关系）而不是继承关系，从而使两者可以相对独立地变化，这就是桥接模式的用意。

  Abstraction：抽象类 Shape
  RefinedAbstraction：扩充抽象类  Color
  Implementor：实现类接口 Black，White
  ConcreteImplementor：具体实现类 Rectangle，Square
 */
public class Main {
	public static void main(String[] args) {		
		Shape square = new Square();
		square.setColor(new White());
		square.draw();
		
		Shape rec = new Rectangle();
		rec.setColor(new Black());
		rec.draw();
	}
}
